name: Test & Deploy Build Images

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  
  test:
    name: pytest integration test
    runs-on: ubuntu-latest

    steps:
      - name: Setup up Python 3.8      
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      
      - name: clone repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Install test dependencies
        working-directory: ./tests/integration
        run: |
          pip3 install -r requirements.dev.txt
      
      - name: Run integration tests
        working-directory: ./tests/integration
        run: |
          chmod +x ./scripts/01-run-tests.sh
          ./scripts/01-run-tests.sh
  
        
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v2
        
      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,suffix=-{{date 'X'}}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      
      - name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}
